package Strings;
import java.util.Vector;

/*
 * http://www.geeksforgeeks.org/given-a-string-print-all-possible-palindromic-partition/
 * TODO: Not working properly
 */
public class S053_PrintAllPossiblePalindromicPartitions {

	// A utility function to check if str is palindroem
	boolean isPalindrome(String str, int low, int high){
	    while (low < high){
	        if (str.charAt(low) != str.charAt(high))
	            return false;
	        low++;
	        high--;
	    }
	    return true;
	}
	 
	// Recursive function to find all palindromic partitions of str[start..n-1]
	// allPart --> A vector of vector of strings. Every vector inside it stores a partition
	// currPart --> A vector of strings to store current partition 
	void allPalPartUtil(Vector<Vector<String> >allPart, Vector<String> currPart, int start, int n, String str){
	    // If 'start' has reached len
	    if (start >= n){
	        allPart.add(currPart);
	        return;
	    }
	 
	    // Pick all possible ending points for substrings
	    for (int i=start; i<n; i++){
	        // If substring str[start..i] is palindrome
	        if (isPalindrome(str, start, i)){
	            // Add the substring to result
	        	System.out.println("adding: "+str.substring(start, start+i-start+1));
	            currPart.add(str.substring(start, i+1));
	 
	            // Recur for remaining remaining substring
	            allPalPartUtil(allPart, currPart, i+1, n, str);
	             
	            // Remove substring str[start..i] from current partition
	            //currPart.remove(str.substring(start, i));
	        }
	    }
	}
	 
	// Function to print all possible palindromic partitions of
	// str. It mainly creates vectors and calls allPalPartUtil()
	public void allPalPartitions(String str){
	    int n = str.length();
	 
	    // To Store all palindromic partitions
	    Vector<Vector<String> > allPart = new Vector<Vector<String> >();
	 
	    // To store current palindromic partition
	    Vector<String> currPart = new Vector<String> (); 
	 
	    // Call recursive function to generate all partiions
	    // and store in allPart
	    allPalPartUtil(allPart, currPart, 0, n, str);
	 
	    // Print all partitions generated by above call
	    for (int i=0; i< allPart.size(); i++ ){
	        for (int j=0; j<allPart.get(i).size(); j++)
	            System.out.print(allPart.get(i).get(j)+" ");
	        System.out.println();
	    }
	}
	public static void main(String[] args) {
		S053_PrintAllPossiblePalindromicPartitions obj = new S053_PrintAllPossiblePalindromicPartitions();
		String str = "nitin";
	    obj.allPalPartitions(str);
	}
}
